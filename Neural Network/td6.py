# -*- coding: utf-8 -*-
"""TD6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o1U-hto94e_nr9INArVXLYMc22A9DMbt
"""

# Commented out IPython magic to ensure Python compatibility.
try:
#   %tensorflow_version 2.x
except Exception:
  pass

import tensorflow as tf
tf.test.gpu_device_name()

from  tensorflow.python.client  import  device_lib
device_lib.list_local_devices ()

#ex1
from tensorflow import keras
from keras.datasets import cifar10

(trainX, trainY), (testX, testY) = cifar10.load_data()
testX_origin=testX #pour garder  une trace du testX de base pour afficher dans la quest 8
print('trainX shape:', trainX.shape)

#ex2
trainX = trainX.astype('float32')
testX = testX.astype('float32')

trainX = trainX/255.0
testX = testX/255.0



print(trainX.shape[1:])

#ex3
from  tensorflow.keras.layers  import  Dense , Conv2D , Flatten , MaxPooling2D, Activation, Dropout
from tensorflow.keras.models import Sequential

model= Sequential()

model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=trainX.shape[1:]))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))

model.add(Dense(10))
model.add(Activation('softmax'))

model.summary()

#ex4 useless

#ex5
model.compile(
    optimizer=keras.optimizers.Adam(learning_rate=0.0001, beta_1=0.9, beta_2=0.999, amsgrad=False),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy'])

#ex6
model.fit(trainX, trainY,
              batch_size=128,
              epochs=20,
              validation_data=(testX, testY))

#ex7
evalu = model.evaluate(testX, testY, verbose=1)
print('Test loss:', evalu[0])
print('Test accuracy:', evalu[1])

#ex8
predictions = model.predict(testX,batch_size=128)

import matplotlib.pyplot as plt
import numpy as np
class_names = [ 'airplane' , 'automobile' , 'bird' , 'cat' , 'deer', 'dog' , 'frog' , 'horse' , 'ship' , 'truck']

for index in range(0,100):#nb d'image test√©e
    plt.figure()
    plt.imshow(testX_origin[index])
    plt.colorbar()
    plt.grid(False)
    prediction_num=np.argmax(predictions[index])
    xlabel = plt.xlabel("prediction " + class_names[prediction_num] + ", real " +class_names[testY[index][0]])
    plt.setp(xlabel, color='g' if prediction_num==testY[index][0] else 'r') 
   
    plt.show()