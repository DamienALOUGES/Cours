# -*- coding: utf-8 -*-
"""Week6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ujfQ79ckPPnmw9Nx3FqldyhP61T87lOt
"""

#question1
import pandas as pd
import numpy as np
from tqdm import tqdm

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

#question2
movies = pd.read_csv('movies.csv', ',')#, index_col=0, names=['title', 'genres'], skiprows=1)
ratings = pd.read_csv('ratings.csv', sep =',')

movies.head()

def extractor(line):
    parantheses_open = [pos for pos, char in enumerate(line) if char == '(']
    parantheses_close = [pos for pos, char in enumerate(line) if char == ')']

    if parantheses_open == []:
        "if the movie year is not given, we define it equal to 0"
        return (line ,0)

    movie = line[0 : parantheses_open[-1]-1]
    year = line[parantheses_open[-1] + 1 : parantheses_close[-1]]

    if '-' in year:
        'inside ////'
        years = year.split('-')
        year = [int(item) for item in years]

    else:
        year = int(year)

    return (movie, year)

#question3
all_genres = set()
for index, row in movies.iterrows():
    #print(extractor(row['title']))
    genres_list = row['genres'].split('|')
    for gen in genres_list:
        all_genres.add(gen)

all_genres = list(all_genres)
len(all_genres)

print(all_genres)
all_genres.index('Drama')

movies_new_columns = ['movieId', 'title', 'year']+all_genres
print(len(movies_new_columns))
print(len(all_genres))
movies_new = pd.DataFrame(columns = movies_new_columns)
print(movies_new)

for index, row in movies.iterrows():
  (title, year) = extractor(row['title'])
  
  genres_vector = [0.0]*len(all_genres)
  genres_list = row['genres'].split('|')
  for g in genres_list:
    genres_vector[all_genres.index(g)] = 1.0

  list_to_append = [row['movieId'], title, year] + genres_vector
  dic = {movies_new_columns[i]: list_to_append[i] for i in range(len(list_to_append))} 
  movies_new = movies_new.append(dic, ignore_index=True)

print(movies_new)

ratings['movieId']=ratings['movieId'].astype(int)
movies_new['movieId']= movies_new['movieId'].astype(int)

print(movies_new)

#normalise items (movies) vectors 
genres_df = movies_new.iloc[:,3:]
genres_df

#normalise genres
genres_df_normalised = genres_df.div(genres_df.sum(axis=1), axis=0)
genres_df_normalised

movies_new = pd.concat([movies_new.iloc[:,0:3], genres_df_normalised], axis=1, sort = False)

#movies dataframe
print(movies_new)

#question7
result = pd.merge(ratings,
                     movies_new[movies_new_columns],
                     on='movieId')
result.head()

result = result.drop(['timestamp', 'title'], axis=1)

result.head()

# users data frame
users_columns = ['userId']+all_genres
users_new = pd.DataFrame(columns = users_columns)
print(users_new)

result.sort_values(['userId', "movieId"], ascending = (True, True))

result[result['userId'] == 2]

for user_id in range(1,611,1):
  #print(user_id)
  user = result[result['userId'] == user_id]

  new_line = []
  for g in all_genres:
    tempo = user[["rating"]].multiply(user[g], axis="index")
    new_line.append(tempo.sum(axis = 0, skipna = True)[0])

  list_to_append = [user_id] + new_line
  line_lables = ['userId'] + all_genres
  dic = {line_lables[i]: list_to_append[i] for i in range(len(list_to_append))} 
  users_new = users_new.append(dic, ignore_index=True)

print(users_new)

print(users_new[users_new['userId'] == 2])

#ex8
from sklearn.metrics.pairwise import cosine_similarity
cosimi=[]

user=users_new[users_new['userId'] == 1]
for movie in movies_new :
  print(movie)
  print(user)
  cosimi.append(cosine_similarity(movie,user))

print(cosimi)