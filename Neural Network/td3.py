# -*- coding: utf-8 -*-
"""TD3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16dY7VIX-CNd3ZzUoN42UITmRqe93oWBP
"""

# Commented out IPython magic to ensure Python compatibility.
#ex1
try:
#   %tensorflow_version 2.x
except Exception:
  pass
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.datasets import imdb

data = keras.datasets.imdb
(train_data,train_label),(test_data, test_label) = data.load_data(num_words=10000)
print(train_data)
print(train_label)
print(test_data)
print(test_label)

#ex2
def  vectorize_sequences(sequences , dimension =10000):
  # Create  an all -zero  matrix  of  shape (len(sequences), dimension)
  results = np.zeros((len(sequences), dimension))
  for i, sequence  in  enumerate(sequences):
    results[i, sequence] = 1.
    # set  specific  indices  of results[i] to 1s
  return  results
# Our  vectorized  training  data
x_train = vectorize_sequences(train_data)
# Our  vectorized  test  data
x_test = vectorize_sequences(test_data)
# Our  vectorized  labels
y_train = np.asarray(train_label).astype('float32')
y_test = np.asarray(train_label).astype('float32')

print(x_train)
print(y_train)
print(x_test)
print(y_test)

#ex3
def initialize_network(n_inputs, n_hidden, n_outputs):
  network= list()
  hidden_layer = [{'weights':[random() for i in range(n_inputs + 1)]} for i in range(n_hidden)]
  network.append(hidden_layer)
  output_layer = [{'weights':[random() for i in range(n_hidden + 1)]} for i in range (n_outputs)]
  network.append(output_layer)
  return network

original_model = initalize_network(16,16,1)