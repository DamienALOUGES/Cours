# -*- coding: utf-8 -*-
"""TD8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10u0rcTyXaPXqfgGkuTnxQMh1xPAZ2D8B
"""

# Commented out IPython magic to ensure Python compatibility.
try:
#   %tensorflow_version 2.x
except Exception:
  pass

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from  tensorflow.keras.layers  import  Dense , Conv2D , Flatten , MaxPooling2D, Activation, Dropout, Reshape, Input
from tensorflow.keras.models import Sequential, Model

from tensorflow import keras
from keras.datasets import mnist

#ex1
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

print(x_train[0])

#ex2
plt.figure()
plt.imshow(x_test[0])

#ex3
latent_size = 32

encoder = Sequential()

encoder.add(Flatten())

encoder.add(Dense(256))
encoder.add(Activation('relu'))
encoder.add(Dropout(0.5))

encoder.add(Dense(128))
encoder.add(Activation('relu'))
encoder.add(Dropout(0.5))

encoder.add(Dense(64))
encoder.add(Activation('relu'))
encoder.add(Dropout(0.5))

encoder.add(Dense(32))
encoder.add(Activation('relu'))

#ex4
decoder = Sequential()

decoder.add(Dense(64, input_shape=(32,)))
decoder.add(Activation('relu'))
decoder.add(Dropout(0.5))

decoder.add(Dense(128))
decoder.add(Activation('relu'))
decoder.add(Dropout(0.5))

decoder.add(Dense(256))
decoder.add(Activation('relu'))
decoder.add(Dropout(0.5))

decoder.add(Dense(784))
decoder.add(Activation('sigmoid'))

decoder.add(Reshape((28,28)))

#ex5
img =Input(shape=(28,28))
latent_vector = encoder(img)
output = decoder (latent_vector)
model = Model(inputs = img, outputs=output)
model.compile("nadam", loss = "binary_crossentropy")

#ex6
EPOCHS=60
for epochs in range(EPOCHS):
  model.fit(x_train,x_train)
  plt.figure()
  plt.imshow(x_train[0])

#ex7
seed = 707469

noise = np.random.normal(loc=0.5, scale=0.5, size=x_train.shape)
noise2 = np.random.normal(loc=0.5, scale=0.5, size=x_test.shape)
x_train_noise= x_train + noise
x_test_noise= x_test + noise2

plt.figure()
plt.imshow(x_train_noise[0])

#ex8
x_train_noise_clipped=np.clip(x_train_noise,0,1)

#ex9
plt.figure()
plt.imshow(x_train_noise_clipped[0])

#ex10
for i in range(3):
  model.fit(x_train_noise_clipped,x_train_noise_clipped)
  plt.figure()
  plt.imshow(x_train_noise_clipped[0])

#ex11
encoder2 = Sequential()

encoder2.add(Input((28,28,1)))

encoder2.add(Conv2D(32, kernel_size=3, strides=2, padding='same',
                 input_shape=trainX.shape[1:]))
encoder2.add(Activation('relu'))

encoder2.add(Conv2D(64, kernel_size=3, strides=2, padding='same'))
encoder2.add(Activation('relu'))

encoder2.add(Flatten())

encoder2.add(Dense(16))